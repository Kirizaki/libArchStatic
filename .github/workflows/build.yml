name: Build libArchStatic

on:
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            runner: ubuntu-latest
            ext: ""
          - os: macos-latest
            runner: macos-latest
            ext: ""
          - os: windows-latest
            runner: windows-latest
            ext: .exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake git

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"' -y
          choco install git -y

      # Optional: setup vcpkg on Windows for static libs
      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          C:/vcpkg/bootstrap-vcpkg.bat
          C:/vcpkg/vcpkg.exe install bzip2 zlib zstd xz openssl libarchive:x64-windows-static

      - name: Configure CMake
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          else
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          fi

      - name: Build
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake --build build --config Release -- -j
          else
            cmake --build build -- -j$(nproc)
          fi

      - name: Package artifacts
        run: |
          mkdir -p artifacts
          cp build/libArchStatic${{ matrix.ext }} artifacts/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libArchStatic-${{ matrix.os }}
          path: artifacts/
