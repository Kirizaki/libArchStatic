name: Build libArchStatic (MacOS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { icon: '🍎', sys: macos, runs-on: 'macos-latest' }
    name: "🚧 ${{ matrix.icon }} ${{ matrix.sys }}"
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Cache dependencies"
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/Cellar
            /usr/local/lib
            /usr/local/include
            $HOME/deps
          key: macos-deps-${{ runner.os }}-v2-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            macos-deps-${{ runner.os }}-v2-

      - name: "Install macOS build tools"
        if: matrix.sys == 'macos'
        run: |
          brew update
          brew install cmake ninja pkg-config autoconf automake libtool gettext po4a

      - name: "Set parallel build variable"
        if: matrix.sys == 'macos'
        run: echo "NUM_CORES=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV

      - name: "Install static dependencies via Homebrew (macOS)"
        if: matrix.sys == 'macos'
        run: |
          # Install precompiled static libraries via Homebrew
          brew install zlib bzip2 xz zstd openssl@3 libarchive

          # Create deps directory structure for compatibility with existing build scripts
          mkdir -p $HOME/deps/{zlib,bzip2,xz,zstd,openssl,libarchive}/{lib,include}

          # Copy/link static libraries and headers to expected locations
          
          # zlib
          cp /usr/local/lib/libz.a $HOME/deps/zlib/lib/
          cp /usr/local/include/zlib.h $HOME/deps/zlib/include/
          cp /usr/local/include/zconf.h $HOME/deps/zlib/include/

          # bzip2
          cp /usr/local/lib/libbz2.a $HOME/deps/bzip2/lib/
          cp /usr/local/include/bzlib.h $HOME/deps/bzip2/include/

          # xz (liblzma)
          cp /usr/local/lib/liblzma.a $HOME/deps/xz/lib/
          cp /usr/local/include/lzma.h $HOME/deps/xz/include/
          cp -r /usr/local/include/lzma $HOME/deps/xz/include/ 2>/dev/null || true

          # zstd
          cp /usr/local/lib/libzstd.a $HOME/deps/zstd/lib/
          cp /usr/local/include/zstd.h $HOME/deps/zstd/include/
          cp /usr/local/include/zdict.h $HOME/deps/zstd/include/ 2>/dev/null || true

          # openssl (using openssl@3)
          cp /usr/local/opt/openssl@3/lib/libcrypto.a $HOME/deps/openssl/lib/
          cp /usr/local/opt/openssl@3/lib/libssl.a $HOME/deps/openssl/lib/ 2>/dev/null || true
          cp -r /usr/local/opt/openssl@3/include/openssl $HOME/deps/openssl/include/

          # libarchive
          cp /usr/local/lib/libarchive.a $HOME/deps/libarchive/lib/
          cp /usr/local/include/archive.h $HOME/deps/libarchive/include/
          cp /usr/local/include/archive_entry.h $HOME/deps/libarchive/include/

      - name: "DEBUG PRINT OUT PATHS"
        run: |
          echo "=== libarchive ==="
          find /Users/runner/deps/ | grep archive.h
          find /Users/runner/deps/ | grep libarchive.a

          echo "=== Full tree of libarchive deps ==="
          ls -R /Users/runner/deps/ || true

          echo "=== Other static libraries ==="
          find /Users/runner/deps/ | grep zstd/include
          find /Users/runner/deps/ | grep xz/include
          find /Users/runner/deps/ | grep bzip2/include
          find /Users/runner/deps/ | grep zlib/include
          find /Users/runner/deps/ | grep openssl/include
          find /Users/runner/deps/ | grep libzstd.a
          find /Users/runner/deps/ | grep liblzma.
          find /Users/runner/deps/ | grep libbz2.a
          find /Users/runner/deps/ | grep libz.a
          find /Users/runner/deps/ | grep libcrypto.a

      - name: "Set ENV for macOS static deps"
        if: matrix.sys == 'macos'
        run: |
          # headers/includes:
          echo "LIBARCHIVE_H=$HOME/deps/libarchive/include" >> $GITHUB_ENV
          echo "ZSTD_H=$HOME/deps/zstd/include" >> $GITHUB_ENV
          echo "XZ_H=$HOME/deps/xz/include" >> $GITHUB_ENV
          echo "BZIP2_H=$HOME/deps/bzip2/include" >> $GITHUB_ENV
          echo "ZLIB_H=$HOME/deps/zlib/include" >> $GITHUB_ENV
          echo "OPENSSL_H=$HOME/deps/openssl/include" >> $GITHUB_ENV

          # libs:
          echo "LIBARCHIVE_LIB=$HOME/deps/libarchive/lib/libarchive.a" >> $GITHUB_ENV
          echo "ZSTD_LIB=$HOME/deps/zstd/lib/libzstd.a" >> $GITHUB_ENV
          echo "XZ_LIB=$HOME/deps/xz/lib/liblzma.a" >> $GITHUB_ENV
          echo "BZIP2_LIB=$HOME/deps/bzip2/lib/libbz2.a" >> $GITHUB_ENV
          echo "ZLIB_LIB=$HOME/deps/zlib/lib/libz.a" >> $GITHUB_ENV
          echo "OPENSSL_LIB=$HOME/deps/openssl/lib/libcrypto.a" >> $GITHUB_ENV

          # Set additional environment variables for pkg-config and build tools
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/opt/openssl@3/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L/usr/local/lib -L/usr/local/opt/openssl@3/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/local/include -I/usr/local/opt/openssl@3/include" >> $GITHUB_ENV

      - name: "Build TOOL"
        run: |
          ./scripts/build.sh --clean --workflow

      # - name: "Run tests"
      #   run: |
      #     python3 ./scripts/gen_test_dirs.py
      #     ./build/libArchStatic pack test_cases tc.bin
      #     ./build/libArchStatic unpack tc.bin test_cases_unpacked
      #     python3 ./scripts/verify_unpack.py test_cases test_cases_unpacked

      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: "binaries-${{ matrix.sys }}"
          path: |
            ${{ matrix.sys == 'macos-latest' && './build/libArchStatic' || '' }}
